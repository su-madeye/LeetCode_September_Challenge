/*
https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/554/week-1-september-1st-september-7th/3445/

c++ solution
Author: Prakhar Tibrewal

Travel through both the both the trees separately and store it in the separate arrays. Merge the arrays and sort them.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void Inorder(vector<int>& v, TreeNode* root) { 
        if(root == NULL)    return;
        Inorder(v,root->left);
        v.push_back(root->val);
        Inorder(v,root->right);
    }
    
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> v1,v2;
        Inorder(v1,root1);
        Inorder(v2,root2);
        // vector<int> v;
        for(int i: v2)  v1.push_back(i);
        sort(v1.begin(),v1.end());
        return v1;
    }
};
